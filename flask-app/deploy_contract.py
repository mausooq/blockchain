from web3 import Web3

# Connect to local Ethereum node
web3 = Web3(Web3.HTTPProvider('http://127.0.0.1:8545'))

# Replace with your Ethereum account and private key
account = web3.eth.accounts[0]
private_key = '0xYourPrivateKey'  # Replace with the private key of the account

# Replace with the actual bytecode of your compiled contract
bytecode = '6080604052348015600e575f80fd5b50610e868061001c5f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c806309f28f8c1461004e57806384917f5d1461006a578063e0600aba14610086578063fc1e5f28146100a2575b5f80fd5b6100686004803603810190610063919061085d565b6100d6565b005b610084600480360381019061007f919061085d565b610191565b005b6100a0600480360381019061009b9190610972565b6102a2565b005b6100bc60048036038101906100b79190610972565b61034d565b6040516100cd959493929190610a28565b60405180910390f35b5f80876040516100e69190610acf565b90815260200160405180910390209050858160010190816101079190610cdf565b50848160020190816101199190610cdf565b508381600301908161012b9190610cdf565b508281600401908161013d9190610cdf565b508181600501819055507fca60a4fd94f59197d5abce45bb73fc0f77b5688830e000b5abbaa7897322a62887878787878760405161018096959493929190610dae565b60405180910390a150505050505050565b5f6040518060c00160405280888152602001878152602001868152602001858152602001848152602001838152509050805f886040516101d19190610acf565b90815260200160405180910390205f820151815f0190816101f29190610cdf565b5060208201518160010190816102089190610cdf565b50604082015181600201908161021e9190610cdf565b5060608201518160030190816102349190610cdf565b50608082015181600401908161024a9190610cdf565b5060a082015181600501559050507f89adeadf8a7d707ed6f61a8880eb932acc0fd9d84d72230ce68a8cc27341af4287878787878760405161029196959493929190610dae565b60405180910390a150505050505050565b5f816040516102b19190610acf565b90815260200160405180910390205f8082015f6102ce9190610685565b600182015f6102dd9190610685565b600282015f6102ec9190610685565b600382015f6102fb9190610685565b600482015f61030a9190610685565b600582015f905550507f03e3fc74a823dc8a922e97965c318244328ca5dfb78db6464a66be5161e1dbf4816040516103429190610e30565b60405180910390a150565b6060806060805f805f876040516103649190610acf565b90815260200160405180910390206040518060c00160405290815f8201805461038c90610b12565b80601f01602080910402602001604051908101604052809291908181526020018280546103b890610b12565b80156104035780601f106103da57610100808354040283529160200191610403565b820191905f5260205f20905b8154815290600101906020018083116103e657829003601f168201915b5050505050815260200160018201805461041c90610b12565b80601f016020809104026020016040519081016040528092919081815260200182805461044890610b12565b80156104935780601f1061046a57610100808354040283529160200191610493565b820191905f5260205f20905b81548152906001019060200180831161047657829003601f168201915b505050505081526020016002820180546104ac90610b12565b80601f01602080910402602001604051908101604052809291908181526020018280546104d890610b12565b80156105235780601f106104fa57610100808354040283529160200191610523565b820191905f5260205f20905b81548152906001019060200180831161050657829003601f168201915b5050505050815260200160038201805461053c90610b12565b80601f016020809104026020016040519081016040528092919081815260200182805461056890610b12565b80156105b35780601f1061058a576101008083540402835291602001916105b3565b820191905f5260205f20905b81548152906001019060200180831161059657829003601f168201915b505050505081526020016004820180546105cc90610b12565b80601f01602080910402602001604051908101604052809291908181526020018280546105f890610b12565b80156106435780601f1061061a57610100808354040283529160200191610643565b820191905f5260205f20905b81548152906001019060200180831161062657829003601f168201915b50505050508152602001600582015481525050905080602001518160400151826060015183608001518460a00151955095509550955095505091939590929450565b50805461069190610b12565b5f825580601f106106a257506106bf565b601f0160209004905f5260205f20908101906106be91906106c2565b5b50565b5b808211156106d9575f815f9055506001016106c3565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61073c826106f6565b810181811067ffffffffffffffff8211171561075b5761075a610706565b5b80604052505050565b5f61076d6106dd565b90506107798282610733565b919050565b5f67ffffffffffffffff82111561079857610797610706565b5b6107a1826106f6565b9050602081019050919050565b828183375f83830152505050565b5f6107ce6107c98461077e565b610764565b9050828152602081018484840111156107ea576107e96106f2565b5b6107f58482856107ae565b509392505050565b5f82601f830112610811576108106106ee565b5b81356108218482602086016107bc565b91505092915050565b5f819050919050565b61083c8161082a565b8114610846575f80fd5b50565b5f8135905061085781610833565b92915050565b5f805f805f8060c08789031215610877576108766106e6565b5b5f87013567ffffffffffffffff811115610894576108936106ea565b5b6108a089828a016107fd565b965050602087013567ffffffffffffffff8111156108c1576108c06106ea565b5b6108cd89828a016107fd565b955050604087013567ffffffffffffffff8111156108ee576108ed6106ea565b5b6108fa89828a016107fd565b945050606087013567ffffffffffffffff81111561091b5761091a6106ea565b5b61092789828a016107fd565b935050608087013567ffffffffffffffff811115610948576109476106ea565b5b61095489828a016107fd565b92505060a061096589828a01610849565b9150509295509295509295565b5f60208284031215610987576109866106e6565b5b5f82013567ffffffffffffffff8111156109a4576109a36106ea565b5b6109b0848285016107fd565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f6109eb826109b9565b6109f581856109c3565b9350610a058185602086016109d3565b610a0e816106f6565b840191505092915050565b610a228161082a565b82525050565b5f60a0820190508181035f830152610a4081886109e1565b90508181036020830152610a5481876109e1565b90508181036040830152610a6881866109e1565b90508181036060830152610a7c81856109e1565b9050610a8b6080830184610a19565b9695505050505050565b5f81905092915050565b5f610aa9826109b9565b610ab38185610a95565b9350610ac38185602086016109d3565b80840191505092915050565b5f610ada8284610a9f565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610b2957607f821691505b602082108103610b3c57610b3b610ae5565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302610b9e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610b63565b610ba88683610b63565b95508019841693508086168417925050509392505050565b5f819050919050565b5f610be3610bde610bd98461082a565b610bc0565b61082a565b9050919050565b5f819050919050565b610bfc83610bc9565b610c10610c0882610bea565b848454610b6f565b825550505050565b5f90565b610c24610c18565b610c2f818484610bf3565b505050565b5b81811015610c5257610c475f82610c1c565b600181019050610c35565b5050565b601f821115610c9757610c6881610b42565b610c7184610b54565b81016020851015610c80578190505b610c94610c8c85610b54565b830182610c34565b50505b505050565b5f82821c905092915050565b5f610cb75f1984600802610c9c565b1980831691505092915050565b5f610ccf8383610ca8565b9150826002028217905092915050565b610ce8826109b9565b67ffffffffffffffff811115610d0157610d00610706565b5b610d0b8254610b12565b610d16828285610c56565b5f60209050601f831160018114610d47575f8415610d35578287015190505b610d3f8582610cc4565b865550610da6565b601f198416610d5586610b42565b5f5b82811015610d7c57848901518255600182019150602085019450602081019050610d57565b86831015610d995784890151610d95601f891682610ca8565b8355505b6001600288020188555050505b505050505050565b5f60c0820190508181035f830152610dc681896109e1565b90508181036020830152610dda81886109e1565b90508181036040830152610dee81876109e1565b90508181036060830152610e0281866109e1565b90508181036080830152610e1681856109e1565b9050610e2560a0830184610a19565b979650505050505050565b5f6020820190508181035f830152610e4881846109e1565b90509291505056fea26469706673582212200a5e83b49f6354c062e997cb1f144398fb7156520dd162a3feb92795bc10207764736f6c634300081a0033'
# Replace with the ABI of your smart contract
abi = [
	{
		"anonymous": False,
		"inputs": [
			{
				"indexed": False,
				"internalType": "string",
				"name": "id",
				"type": "string"
			},
			{
				"indexed": False,
				"internalType": "string",
				"name": "title",
				"type": "string"
			},
			{
				"indexed": False,
				"internalType": "string",
				"name": "description",
				"type": "string"
			},
			{
				"indexed": False,
				"internalType": "string",
				"name": "status",
				"type": "string"
			},
			{
				"indexed": False,
				"internalType": "string",
				"name": "sponsor",
				"type": "string"
			},
			{
				"indexed": False,
				"internalType": "uint256",
				"name": "participants",
				"type": "uint256"
			}
		],
		"name": "TrialCreated",
		"type": "event"
	},
	{
		"anonymous": False,
		"inputs": [
			{
				"indexed": False,
				"internalType": "string",
				"name": "id",
				"type": "string"
			}
		],
		"name": "TrialDeleted",
		"type": "event"
	},
	{
		"anonymous": False,
		"inputs": [
			{
				"indexed": False,
				"internalType": "string",
				"name": "id",
				"type": "string"
			},
			{
				"indexed": False,
				"internalType": "string",
				"name": "title",
				"type": "string"
			},
			{
				"indexed": False,
				"internalType": "string",
				"name": "description",
				"type": "string"
			},
			{
				"indexed": False,
				"internalType": "string",
				"name": "status",
				"type": "string"
			},
			{
				"indexed": False,
				"internalType": "string",
				"name": "sponsor",
				"type": "string"
			},
			{
				"indexed": False,
				"internalType": "uint256",
				"name": "participants",
				"type": "uint256"
			}
		],
		"name": "TrialUpdated",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "id",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "title",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "description",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "status",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "sponsor",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "participants",
				"type": "uint256"
			}
		],
		"name": "createTrial",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "id",
				"type": "string"
			}
		],
		"name": "deleteTrial",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "id",
				"type": "string"
			}
		],
		"name": "readTrial",
		"outputs": [
			{
				"internalType": "string",
				"name": "title",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "description",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "status",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "sponsor",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "participants",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "id",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "title",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "description",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "status",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "sponsor",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "participants",
				"type": "uint256"
			}
		],
		"name": "updateTrial",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]

# Deploying the contract
def deploy_contract(bytecode, abi, account, private_key):
    # Create the contract instance
    Contract = web3.eth.contract(abi=abi, bytecode=bytecode)

    # Build the transaction
    construct_txn = Contract.constructor().buildTransaction({
        'from': account,
        'nonce': web3.eth.getTransactionCount(account),
        'gas': 1728712,
        'gasPrice': web3.toWei('21', 'gwei')  # Adjust the gas price as needed
    })

    # Sign the transaction
    signed_txn = web3.eth.account.sign_transaction(construct_txn, private_key=private_key)

    # Send the transaction
    tx_hash = web3.eth.send_raw_transaction(signed_txn.rawTransaction)

    # Wait for the transaction to be mined
    tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)

    # Return contract address
    return tx_receipt.contractAddress

# Deploy the contract
contract_address = deploy_contract(bytecode, abi, account, private_key)

# Print the deployed contract address
print(f"Contract deployed at address: {contract_address}")
